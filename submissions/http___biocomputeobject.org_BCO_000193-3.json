{
    "bco_id": "http://biocomputeobject.org/BCO_000193",
    "checksum": "3f6e0b1f92bb57ac146def402ea2c037",
    "bco_spec_version": "1.3.0",
    "provenance_domain": {
        "name": "Processing sequence data from the 1000 Genomes Project",
        "version": "1.0.0",
        "license": "https://creativecommons.org/licenses/by/4.0/legalcode",
        "created": "2019-08-06T17:40:03.765020",
        "modified": "2019-08-29T20:53:24.447800",
        "contributors": [
            {
                "name": "Michael Joseph",
                "orcid": "https://orcid.org/0000-0002-9501-9681",
                "affiliation": "George Washington University",
                "contribution": [
                    "createdBy"
                ],
                "email": "mjosep2@masonlive.gmu.edu"
            }
        ]
    },
    "usability_domain": [
        "Pulled directly from https://github.com/dpastling/plethora.  Plethora is a tool kit for copy number variation (CNV) analysis of highly duplicated regions. It was tailored specifically for the DUF1220 domain which is found in over 300 copies in the human genome. However it could be applied to other high copy domains and segmental duplications. The details are published here:  https://doi.org/10.1186/s12864-017-3976-z. A script for installing dependencies is found here:  https://github.com/dpastling/plethora/blob/master/code/install_tools.sh.  The following link contains the minimal steps necessary to run the pipeline: https://github.com/dpastling/plethora#quick-start."
    ],
    "extension_domain": {
        "fhir_extension": [],
        "scm_extension": {
            "scm_repository": "https://github.com/dpastling/plethora",
            "scm_path": "",
            "scm_type": "git",
            "scm_commit": ""
        }
    },
    "description_domain": {
        "keywords": [
            "genome",
            "genomics",
            "next-generation-sequencing",
            "copy-number-variation",
            "plethora",
            "DUF1220"
        ],
        "pipeline_steps": [
            {
                "name": "Configure",
                "version": "1.0.0",
                "step_number": 0,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "config.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/1000genomes/config.sh",
                            "filename": "config.sh"
                        }
                    },
                    {
                        "name": "A script for installing the required tools",
                        "uri": {
                            "access_time": "",
                            "sha1_chksum": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/install_tools.sh",
                            "filename": "install_tools.sh"
                        }
                    },
                    {
                        "name": "Lower default insert size for bowtie2",
                        "uri": {
                            "access_time": "",
                            "sha1_chksum": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/bowtie2.sh",
                            "filename": "bowtie2.sh"
                        }
                    },
                    {
                        "name": "Update Bowtie version to 2.2.9",
                        "uri": {
                            "access_time": "",
                            "sha1_chksum": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/build_gc_model.sh",
                            "filename": "build_gc_model.sh"
                        }
                    },
                    {
                        "name": "Code for generating the GC model for the regions of interest",
                        "uri": {
                            "access_time": "",
                            "sha1_chksum": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/gc_from_fasta.pl",
                            "filename": "gc_from_fasta.pl"
                        }
                    }
                ],
                "description": "Edit the config.sh file to adapt the paths and sample list for your environment. The config file is where all the project specific parameters and sample names should go. The other scripts in the pipeline should be kept as abstract as possible for reuse. Here are few important variables required by the pipeline: sample_index (path to the file with the 1000 Genomes information), genome (path to the Bowtie indices for genome), master_ref (path to the bedfile with the DUF1220 coordinates, or other regions of interest), alignment_dir (path to where the Bowtie2 alignments will go), result_folder (path to where the resulting coverage files will be stored), bowtie_params (additional parameters to be passed to Bowtie2 that are specific to the project). The config file will also create directories where all the results will go."
            },
            {
                "name": "Download the fastq files from the 1000 Genomes Project",
                "version": "1.0.0",
                "step_number": 1,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "1_download.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/1000genomes/1_download.sh",
                            "filename": "1_download.sh"
                        }
                    }
                ],
                "description": "This script downloads the fastq files for each sample from the 1000 Genomes site as specified in a sample_index file. The script fetches all associated files with a given sample name and uses wget to download the files to the fastq folder. The script checks the md5sum hashes for each file against the downloaded file. The script exits with an error if they do not match."
            },
            {
                "name": "Trim and filter the reads",
                "version": "1.0.0",
                "step_number": 2,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "2_trim.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/1000genomes/2_trim.sh",
                            "filename": "2_trim.sh"
                        }
                    }
                ],
                "description": "This script automates the read trimming by Cutadapt."
            },
            {
                "name": "Align reads to the genome",
                "version": "1.0.0",
                "step_number": 3,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "3_batch_bowtie.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/1000genomes/3_batch_bowtie.sh",
                            "filename": "3_batch_bowtie.sh"
                        }
                    }
                ],
                "description": "This script automates the Bowtie2 alignments for the filtered reads generated above."
            },
            {
                "name": "Remove temporary files",
                "version": "1.0.0",
                "step_number": 4,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "4_batch_clean.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/1000genomes/4_batch_clean.sh",
                            "filename": "4_batch_clean.sh"
                        }
                    }
                ],
                "description": "This script removes intermediate files from earlier stages of the pipeline. This is useful because WGS files can take up a lot of disk space. This script first confirms that files from previous steps have been run correctly before removing them. By default it assumes that the number of reads in the fastq file are correct (verified via checksum or read counting). Optionally you can provide a file with the expected number of reads. The script deletes the file from a prior step if the file in the next step has the correct number of reads (e.g. delete the original bam file if the sorted bam has the correct number of reads and delete the sorted bam if the resulting bed file has the correct number of reads). If the data have been downloaded from a public repository like the 1000 Genomes, this script can remove the fastq files by passing an optional flag. The script assumes the .bam file contains unaligned reads (e.g. the number of reads in the fastq file should match the number of reads in the .bam file)."
            },
            {
                "name": "Calculate coverage for each region of interest",
                "version": "1.0.0",
                "step_number": 5,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "5_batch_make_bed.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/1000genomes/5_batch_make_bed.sh",
                            "filename": "5_batch_make_bed.sh"
                        }
                    }
                ],
                "description": "This script converts the .bam alignment file into bed format, parses the reads Calls the merge_pairs.pl script (described below) to combined proper pairs into a single fragment, finds overlaps with the reference bed file containing the regions of interest (e.g. DUF1220, and calculates the average coverage for each region: (number of bases that overlap) / (domain length)"
            },
            {
                "name": "Remove temporary files",
                "version": "1.0.0",
                "step_number": 6,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "6_batch_clean.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/tree/master/code/1000genomes",
                            "filename": "6_batch_clean.sh"
                        }
                    }
                ],
                "description": "At this stage it can remove the alignment and fastq files if present."
            },
            {
                "name": "Correct coverage for GC bias",
                "version": "1.0.0",
                "step_number": 7,
                "input_list": [],
                "output_list": [],
                "prerequisite": [
                    {
                        "name": "7_batch_gc_correction.sh",
                        "uri": {
                            "access_time": "",
                            "uri": "https://github.com/dpastling/plethora/blob/master/code/1000genomes/7_batch_gc_correction.sh",
                            "filename": "7_batch_gc_correction.sh"
                        }
                    }
                ],
                "description": "This script performs the GC correction step using conserved regions that are assumed to be found in diploid copy number. This script requires the _read.depth.bed file generated in step 5 above as well as a file with the percent GC content for each domain."
            }
        ]
    },
    "execution_domain": {
        "external_data_endpoints": [],
        "environment_variables": {},
        "script_driver": "",
        "software_prerequisites": [
            {
                "name": "Bowtie2",
                "version": "2.2.9",
                "uri": {
                    "access_time": "",
                    "uri": "http://bowtie-bio.sourceforge.net/bowtie2/index.shtml",
                    "filename": ""
                }
            },
            {
                "name": "Bedtools",
                "version": "2.17.0",
                "uri": {
                    "access_time": "",
                    "uri": "https://bedtools.readthedocs.io/en/latest/",
                    "filename": ""
                }
            },
            {
                "name": "Samtools",
                "version": "0.1.19-44428cd",
                "uri": {
                    "access_time": "",
                    "uri": "http://samtools.sourceforge.net/",
                    "filename": ""
                }
            },
            {
                "name": "Cutadapt",
                "version": "1.12",
                "uri": {
                    "access_time": "",
                    "uri": "https://cutadapt.readthedocs.io/en/stable/",
                    "filename": ""
                }
            },
            {
                "name": "Perl module: Math::Random",
                "version": "",
                "uri": {
                    "access_time": "",
                    "uri": "",
                    "filename": ""
                }
            },
            {
                "name": "Perl module: Math::Complex",
                "version": "",
                "uri": {
                    "access_time": "",
                    "uri": "",
                    "filename": ""
                }
            }
        ],
        "script": []
    },
    "parametric_domain": [
        {
            "step": "Quick start",
            "param": "--minimum-length",
            "value": "10"
        },
        {
            "step": "Quick start",
            "param": "--trim-n",
            "value": "80"
        }
    ],
    "io_domain": {
        "input_subdomain": [],
        "output_subdomain": []
    },
    "error_domain": {
        "empirical_error": {},
        "algorithmic_error": {}
    }
}